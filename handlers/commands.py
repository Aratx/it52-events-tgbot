from aiogram import types
from aiogram.filters import Command
from keyboards.events_keyboards import build_status_keyboard
from storage.user_storage import set_user_event_status, set_search_results
from services.search_service import search_events_by_query
from keyboards.search_keyboards import build_search_results_keyboard
from services.datetime_utils import parse_datetime, format_datetime
import logging

logger = logging.getLogger(__name__)

async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π IT52.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /events –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ IT-–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –ù–∏–∂–Ω–µ–º –ù–æ–≤–≥–æ—Ä–æ–¥–µ\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"
    )

async def cmd_events(message: types.Message):
    set_user_event_status(message.from_user.id, "future")
    await message.answer(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
        reply_markup=build_status_keyboard()
    )

async def cmd_search(message: types.Message):
    try:
        query = message.text.split(maxsplit=1)[1].strip()
        if not query:
            await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /search")
            return
            
        search_msg = await message.answer(f"üîç –ò—â—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}...")
        
        events_data = await search_events_by_query(query)
        
        if not events_data:
            await search_msg.edit_text(f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        response = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
        events_list = []
        
        for event in events_data[:5]:
            attrs = event.get('attributes', {})
            dt = parse_datetime(attrs.get('startedAt'))
            date_str = format_datetime(dt) if dt else "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            title = attrs.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50]
            
            events_list.append({
                "id": event["id"],
                "title": title,
                "date": date_str
            })
            response += f"‚Ä¢ {title}\n  üìÖ {date_str}\n\n"
        
        set_search_results(message.from_user.id, events_data, query)
        
        keyboard = build_search_results_keyboard(events_list, len(events_data) > 5)
        
        await search_msg.edit_text(
            response,
            reply_markup=keyboard
        )
        
    except IndexError:
        await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /search\n–ü—Ä–∏–º–µ—Ä: /search python")
    except Exception as e:
        logger.error(f"Search command failed: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞")

def register_commands(dp):
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_events, Command("events"))
    dp.message.register(cmd_search, Command("search"))